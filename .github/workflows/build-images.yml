name: Build Raspberry Pi Images
on:
  push:
    branches: [main]
    paths:
      - 'systems/aarch64-linux/**'
      - 'systems/armv7l-linux/**'
      - 'flake.nix'
      - 'flake.lock'
      - '.github/workflows/build-images.yml'
  workflow_dispatch: # Allow manual triggering
jobs:
  build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        system: ["unimatrix01", "unimatrix02", "unimatrix03", "unimatrix04", "subspace-relay"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
      - name: Set up Cachix
        uses: cachix/cachix-action@v14
        with:
          name: utopia-planitia
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Build ${{ matrix.system }} SD image
        id: build
        run: |
          # Determine architecture based on system name
          if [[ "${{ matrix.system }}" == "subspace-relay" ]]; then
            ARCH="armv7l-linux"
          else
            ARCH="aarch64-linux"
          fi

          # Build the image
          nix build ".#nixosConfigurations.${{ matrix.system }}.config.system.build.sdImage" -v --option builders-use-substitutes true

          # Find the image path
          IMAGE_PATH=$(find result/sd-image -name "*.img" -o -name "*.img.zst" | head -n 1)
          IMAGE_FILENAME=$(basename $IMAGE_PATH)

          # Extract the image if it's compressed
          if [[ "$IMAGE_PATH" == *.zst ]]; then
            echo "Image is compressed, extracting..."
            nix-shell -p zstd --run "zstd -d $IMAGE_PATH -o ${{ matrix.system }}.img"
            IMAGE_FILENAME="${{ matrix.system }}.img"
          else
            cp $IMAGE_PATH ${{ matrix.system }}.img
            IMAGE_FILENAME="${{ matrix.system }}.img"
          fi

          echo "image_name=$IMAGE_FILENAME" >> $GITHUB_OUTPUT
      - name: Upload image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.system }}-sd-image
          path: ${{ matrix.system }}.img
          retention-days: 3
      - name: Create GitHub Release (on tag only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.system }}.img
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

